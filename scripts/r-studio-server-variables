#!/bin/bash
# -*- coding: utf-8 -*-
# SLURM job script for run RStudio into Singularity container
# The Advanced Research Computing at Hopkins (ARCH)
# Ricardo S Jacomini < rdesouz4 @ jhu.edu >
# Date: Apr, 7 2022

# Create temporary directory to be populated with directories to bind-mount in the container
# where writable file systems are necessary. Adjust path as appropriate for your computing environment.
export workdir=$(python -c 'import tempfile; print(tempfile.mkdtemp())')

mkdir -p -m 700 ${workdir}/run ${workdir}/tmp ${workdir}/var/lib/rstudio-server ${workdir}/var/log

cat > ${workdir}/database.conf <<END
provider=sqlite
directory=/var/lib/rstudio-server
END

cat >  ${workdir}/rsession.sh << END
#!/bin/sh
# Log all output from this script
export RSESSION_LOG_FILE=/var/log/rstudio/rsession.log

exec &>>"\${RSESSION_LOG_FILE}"

# Launch the original command
echo "**Which rsession"
which rsession
echo "Launching rsession..."
set -x

exec rsession --r-libs-user "${R_LIBS_USER}"  "\${@}"
END

chmod +x ${workdir}/rsession.sh

# Set OMP_NUM_THREADS to prevent OpenBLAS (and any other OpenMP-enhanced
# libraries used by R) from spawning more threads than the number of processors
# allocated to the job.
#
# Set R_LIBS_USER to a path specific to studio to avoid conflicts with
# personal libraries from any R installation in the host environment

# get unused socket per https://unix.stackexchange.com/a/132524
# tiny race condition between the python & singularity commands
readonly export PORT=$(python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()')

# Do not suspend idle sessions.
# Alternative to setting session-timeout-minutes=0 in /etc/rstudio/rsession.conf
# https://github.com/rstudio/rstudio/blob/v1.4.1106/src/cpp/server/ServerSessionManager.cpp#L126

# the CA certificates used by the LDAP server (default: use system CA certificates)

cat > ${workdir}/.ca.pem <<END
-----BEGIN CERTIFICATE-----

      paste your certificate here

-----END CERTIFICATE-----
END

export CERT_FILE=$HOME/singularity/r-studio/.ca.pem

export RSTUDIO_VERSION=rstudio-server-1.1.463

export SINGULARITYENV_RSTUDIO_SESSION_TIMEOUT=0
export SINGULARITYENV_LIBRARY_PATH=$LIBRARY_PATH
export SINGULARITYENV_R_LIBS_USER=$R_LIBS_USER
export SINGULARITYENV_LDAP_HOST=ldapserver
export SINGULARITYENV_LDAP_USER_DN='uid=%s,dc=cm,dc=cluster'
export SINGULARITYENV_LDAP_CERT_FILE=/etc/rstudio/ca-certs.pem
export SINGULARITYENV_PATH=/usr/lib/rstudio-server/bin:${PATH}
export SINGULARITYENV_USER=$(id -un)
export SINGULARITY_BIND="${workdir}/run:/run,${workdir}/tmp:/tmp,${workdir}/database.conf:/etc/rstudio/database.conf,${workdir}/rsession.sh:/etc/rstudio/rsession.sh,${workdir}/var/log/:/var/log/rstudio/,${workdir}/var/lib/rstudio-server:/var/lib/rstudio-server,${workdir}/.ca.pem:/etc/rstudio/ca-certs.pem"


# https://hub.docker.com/repository/docker/archrockfish/rstudio

image=rstudio_1.4.463_1.sif

export SINGULARITY_IMAGE=$HOME/singularity/r-studio/$image

echo -e "\n The Advanced Research Computing at Hopkins (ARCH)"
echo -e " SLURM job script for run RStudio into Singularity container"
echo -e " Support:  help@rockfish.jhu.edu \n"

if [ ! -f ${SINGULARITY_IMAGE} ]; then
   echo -e "Copying R-Studio-Server singularity image to : ${SINGULARITY_IMAGE} \n"

   mkdir -p ${HOME}/singularity/r-studio/
   rsync -a /data/rdesouz4/singularity/r-studio/$image  ${HOME}/singularity/r-studio/
else
   echo -e "\n Using Singularity image: ${SINGULARITY_IMAGE} \n"
fi
