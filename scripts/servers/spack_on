#!/bin/bash
# -*- coding: utf-8 -*-
# SLURM job script for run RStudio into Singularity container
# The Advanced Research Computing at Hopkins (ARCH)
# Ricardo S Jacomini < rdesouz4 @ jhu.edu >
# Date: Jul, 18 2022

PROGNAME=$(basename $0)
list_all_users="yes"
user="$(/usr/bin/whoami)"

function usage {

  1>&2 cat <<EOF

    $PROGNAME:  It is a wrap that uses Spack to manage the installation and configuration of software packages in own home directory

usage: ${PROGNAME} [-hacir]

    -h | --help         Display this help message
    -a | --activate     Activate the Spack after installation (Default)
                        NOTE: Use EXIT to return to Rockfish, after spack on!
    -c | --create       Setup Spack inside user directory
    -i | --install      Install packages using a SLURM job ( Default: locally environment )
                        Note: You can install using another env.
                              ${PROGNAME} -i my_env
    -r | --remove       Remove Spack inside user directory

EOF

}

function usage_rfadmin {

  1>&2 cat <<EOF

    $PROGNAME:  It is a wrap that uses Spack to manage the installation and configuration of software packages in own home directory

usage: ${PROGNAME} [-hacfrim]

    -h | --help         Display this help message
    -a | --activate     Activate the Spack after installation (Default)
                        NOTE: Use EXIT to return to Rockfish, after spack on!
    -c | --create       Setup Spack inside user directory
    -f | --find         Add specs (packages) and compilers detected on the Rockfish
                        You may add parameters related another spack installation path.
                        (Default: /data/apps/linux-centos8-cascadelake)
                        e.g.: ${PROGNAME} -f /data/apps/linux-centos8-cascadelake/

    -i | --install      Install packages using a SLURM job ( Default: locally environment )
                        Note: You can install using another env.
                              ${PROGNAME} -i my_env

    -i | --install -rf  If you are in rfadmin group, and want to install packages on Rockfish system using a SLURM job.
                        It will install with Custom Scope of install_tree: /data/apps/extern/spack_on

                        e.g.: ${PROGNAME} -i -rf
                              ${PROGNAME} -i my_env -rf

    -r | --remove       Remove Spack inside user directory

    -m | --merge        Merge multiple YAML files into a single YAML file.
                        Files are merged in order, such that files listed later will override files listed earlier.
                        e.g.: ${PROGNAME} -m file1.yaml file2.yaml ...

More help:

Also, you may install packages on Rockfish manually if spack_on env is activated, otherwise use -rf as above:
  spack -C ~/.spack/.rf/ config get config   ( The -C will change the install_tree point to /data/apps/extern/spack_on )
  spack -C ~/.spack/.rf/ find -pl
  spack -C ~/.spack/.rf/ concretize -f
  spack -ddd -C ~/.spack/.rf/ install -j 8

How to create extra modules in an environment activated:
  spack module lmod refresh 'package_name'"
  spack debug report

EOF

}


function Close_Subshell ()
{
   cd
   echo -e "Closing subshell..."

   kill -1 ${SSID} >> /dev/null 2>&1
}

function Spack_setup ()
{
  if [ -z ${SPACK_ROOT} ]; then
     echo -e "\nIf spack is installed for this user: \n\nUse: spack_on --activate to activate "
     exit 1
  fi

  SPACK_LINUX=${HOME}/.spack/linux

  if [ ! -d "${SPACK_LINUX}" ]; then
    mkdir -p ${SPACK_LINUX}
    mkdir -p ${HOME}/.spack/.rf/

cat > ${HOME}/.spack/.rf/config.yaml << \EOF
config:
  install_tree:
    # if you are in rfadmin group, and want to install packages on Rockfish system
    # spack -C ${HOME}/.spack/.rf config get config
    root: /data/apps/extern/spack_on
EOF

cat > ${SPACK_LINUX}/config.yaml << \EOF
#
# https://spack.readthedocs.io/en/latest/config_yaml.html
#
config:
  module set:
    tcl:  ~/modulefiles/tcl
    lmod: ~/modulefiles/lmod
  install_tree:
    root: $spack/opt/spack

    projections:
      all: "${COMPILERNAME}/${COMPILERVER}/${PACKAGE}/${VERSION}-${HASH}"
  template_dirs:
  - $spack/share/spack/templates
  license_dir: $spack/etc/spack/licenses
  build_stage:
  - $tempdir/$user/spack-stage
  - $user_cache_path/stage
  test_stage: $user_cache_path/test
  source_cache: $spack/var/spack/cache
  misc_cache: $user_cache_path/cache
  connect_timeout: 10
  verify_ssl: true
  suppress_gpg_warnings: false
  install_missing_compilers: false
  checksum: true
  deprecated: false
  dirty: false
  build_language: C
  locks: true
  url_fetch_method: urllib
  ccache: false
  concretizer: clingo
  db_lock_timeout: 3
  package_lock_timeout: null
  shared_linking: rpath
  allow_sgid: true
  terminal_title: false
EOF

cat > ${SPACK_LINUX}/modules.yaml << EOF
#
# https://spack.readthedocs.io/en/latest/module_file_support.html
#
# These are configurations for the module set named "default"
#
modules:
  default:
    # Where to install modules
    roots:
     lmod: ~/modulefiles/lmod
    # What type of modules to use
    enable:
      - lmod
    lmod:
      core_compilers:
        - 'gcc@10.3.0'
        - 'gcc@9.3.0'
      hash_length: 7
      hierarchy:
        - mpi
      whitelist:
       - gcc
      blacklist:
       - '%gcc@8.3.1'
      projections:
        all:  '{compiler.name}/{compiler.version}/{name}/{version}'
        ^mpi: '{compiler.name}/{compiler.version}/{name}/{version}/{^mpi.name}/{^mpi.version}'
      all:
        autoload: none
EOF

cat > ${SPACK_LINUX}/concretizer.yaml << EOF
#
# https://spack.readthedocs.io/en/latest/build_settings.html#concretizer-options
#
concretizer:
  # Whether to consider installed packages or packages from buildcaches when
  # concretizing specs. If `true`, we'll try to use as many installs/binaries
  # as possible, rather than building. If `false`, we'll always give you a fresh
  # concretization.
  reuse: true
  # Options that tune which targets are considered for concretization. The
  # concretization process is very sensitive to the number targets, and the time
  # needed to reach a solution increases noticeably with the number of targets
  # considered.
  targets:
    # Determine whether we want to target specific or generic microarchitectures.
    # An example of the first kind might be for instance "skylake" or "bulldozer",
    # while generic microarchitectures are for instance "aarch64" or "x86_64_v4".
    granularity: microarchitectures
    # If "false" allow targets that are incompatible with the current host (for
    # instance concretize with target "icelake" while running on "haswell").
    # If "true" only allow targets that are compatible with the host.
    host_compatible: true
  # When "true" concretize root specs of environments together, so that each unique
  # package in an environment corresponds to one concrete spec. This ensures
  # environments can always be activated. When "false" perform concretization separately
  # on each root spec, allowing different versions and variants of the same package in
  # an environment.
  unify: when_possible
EOF

  fi

# https://spack.readthedocs.io/en/latest/build_settings.html#external-packages

  echo -e "\nAdding external compilers... \n"
  spack compiler find
  ml intel/2022.0
  spack compiler find
}

function Spack_Add_Packages ()
{

  if [ -z ${SPACK_ROOT} ]; then
     echo -e "\nIf spack is installed for this user: \n\nUse: spack_on --activate to activate "
     exit 1
  fi

  prefix='-f'
  args=${@#"$prefix"}

  echo ${args} | grep --quiet "linux-centos8-cascadelake"
  # Exit status 0 means substring was found
  # Exit status 1 means substring was not found

  Spack_setup

  if [ -z ${args} ]; then
     #export BASE_Rockfish=/data/spack/rockfishmarianatrenchremotebuildsite/share/spack
     #cp $BASE_Rockfish/etc/spack/compilers.yaml ${HOME}/.spack/linux/compilers.yaml
     export BASE_COMPILERS=/data/apps/linux-centos8-cascadelake
  else
     export BASE_COMPILERS=${args}
  fi

  SPACK_LINUX=${HOME}/.spack/linux

cat > ${SPACK_LINUX}/packages.yaml << EOF
packages:
EOF

  COMPILERS=$(ls -d ${BASE_COMPILERS}/* | xargs -n 1 basename)

  if [ -z ${BASE_COMPILERS} ]; then
    echo -e "\nSearching for installed packages on Rockfish..."
    spack external find --all

    echo -e "Adding external compiler... \n"
    spack compiler find
    exit 1
  fi

  if (( ${#COMPILERS[@]} == 0 ));then
    echo "No compilers found" >&2
    exit 1
  else
    echo -e "\nSearching for installed packages on: $BASE_COMPILERS"

    echo -e "\nThis task might take a while. It is needed run once...\n"

  COUNT=0

  for compiler in ${COMPILERS[@]}; do
    for package in $(ls -d ${BASE_COMPILERS}/${compiler}/* | xargs -n 1 basename); do

      if [[ ! -f ${BASE_COMPILERS}/${compiler}/${package}/.spack/spec.yaml ]];then continue; fi

      spec_name=$(cat ${BASE_COMPILERS}/${compiler}/${package}/.spack/spec.yaml | sed '2!d' 2>/dev/null )
      package_name=$(echo ${spec_name} | sed 's/..//;s/.$//')
      package_ver=$(echo $package | awk -F- '{print $(NF -1)}')
      hastag=$(echo $package | awk -F- '{print $(NF)}')

      CC=$(echo ${compiler} | cut -f 1 -d -)
      VER=$(echo ${compiler} | cut -f 2 -d -)

     (( COUNT++ ))

      #echo -e "$package_name@$package_ver %${CC}@${VER}"

cat >> ${SPACK_LINUX}/packages.yaml << EOF
  ${package_name}:
    buildable: false
    externals:
    - spec: $package_name@$package_ver %${CC}@${VER}
      prefix: $BASE_COMPILERS/$compiler/$package
EOF
        done
      done
  fi

  echo "${COUNT} packages were added."

  echo -e "\nSearching for additional external software on Rockfish..."
  spack external find --all --not-buildable

  sleep 3
  #  : ' MULTILINE-COMMENT
  #  ' MULTILINE-COMMENT

  if [[ -z ${SPACK_ENV} ]]; then
     #export BASE_Rockfish=/data/spack/rockfishmarianatrenchremotebuildsite/share/spack
     #cp $BASE_Rockfish/etc/spack/compilers.yaml ${HOME}/.spack/linux/compilers.yaml
     ENV_SPACK=$(echo $SPACK_ENV | rev | cut -d'/' -f 1 | rev)
     echo $ENV_SPACK
     spack_on -m ${SPACK_LINUX}/packages.yaml ${SPACK_ROOT}/spack/var/spack/environments/${ENV_SPACK}/spack.yaml
  else
     if [[ -f $SPACK_ROOT/etc/spack/packages.yaml ]];then
        spack_on -m ${SPACK_LINUX}/packages.yaml ${HOME}/.spack/packages.yaml $SPACK_ROOT/etc/spack/packages.yaml
     else
        spack_on -m ${SPACK_LINUX}/packages.yaml ${HOME}/.spack/packages.yaml
     fi
  fi

}


function Spack_Up ()
{
  export SPACK_ROOT=${HOME}/software_spack/spack
  source ${SPACK_ROOT}/share/spack/setup-env.sh
}

function Activate_Spack ()
{
  export SPACK_ROOT=${HOME}/software_spack/spack

# subshell.sh
  if [[ ${SS} == 1 ]]; then
     clear
     echo -e "\nYou are with spack on, please check if the environment is activated!\n"
     source /data/apps/go.sh
     ml restore

     source ${SPACK_ROOT}/share/spack/setup-env.sh

     export MODULEPATH=${MODULEPATH}:${HOME}/modulefiles/lmod

     spack env list
     echo " "
     echo "Managing environments: "
     echo " "
     echo "spack env list"
     echo "spacktivate locally"
     echo "spack env activate locally"
     echo "spack env create my_env "
     echo "spack env remove my_env "
     echo " "
  else
     if [ -d "${SPACK_ROOT}" ]
     then
        clear
        export SSID=${BASHPID}
        bash --init-file <(
        echo "
        echo " ";
        #export SPACK_ROOT=${HOME}/software_spack/spack
        source /data/apps/go.sh;
        ml restore;
        export MODULEPATH=${MODULEPATH}:${HOME}/modulefiles/lmod
        echo "You are runnnig spack in a SubSHELL: ${BASH_SUBSHELL}";
        export SS=$BASH_SUBSHELL

        export PS1='\n\[\e[36m\]\e[0;33m(SPACK on RF)\e[m \h \W > ';
        #export LMOD_PACKAGE_PATH=/data/apps/v2/a/lmod/.lmodsite;
        #export LMOD_AVAIL_STYLE=en_grouped;
        #export MODULEPATH=$MODULEPATH:/data/apps/v2/a/lmod/Core:${HOME}/modulefiles/lmod;
        export LMOD_IGNORE_CACHE=1;

        source ${SPACK_ROOT}/share/spack/setup-env.sh
        echo " ";
        echo "You are in the spack, please activate an environment!"
        echo " ";
        echo "Managing environments: ";
        echo " ";
        echo "spack env list ";
        echo "spacktivate locally";
        echo "spack env activate locally";
        echo "spack env create my_env ";
        echo "spack env remove my_env ";
        echo " ";
        spack env list;
        echo " ";
        echo "NOTE: The extra modules installed in this environment is only available when it is enabled, "
        echo "or if LMOD module is created in ${HOME}/modulefiles/lmod"
        echo " ";
        echo "How to create extra modules in an environment activated:"
        echo "\$ spack module lmod refresh 'package_name'"
        echo "\$ spack debug report"
        echo " ";
        echo "Please, type EXIT to return to Rockfish syste." ;
        echo " ";
 ")

     else
        echo -e "\nSpack is not installed for this user: \n\nUse: spack_on --create.\n"
     fi
   fi

   exit 1
}

function Install_Packages ()
{

  prefix='-i'
  env=${@#"$prefix"}

  # echo "env: ${env} @:  ${@}"

  if [[ ( $@ == *'--'*  ) || ( "${env}" == '-'  ) || ( "${env}" == 'locally -'  )  ]]; then
    clear
    usage
    exit
  elif [[ ( $@ == "-i" ) ]]; then
    # echo "no rf_cluster with locally - ok"
    sbatch -c 8 -t 240 --wrap='spack env activate 'locally'; time spack install -j8'
  elif [[ ( $@ == "-i -rf" ) ]]; then
    # echo "with rf_cluster and locally - ok"
    sbatch -c 8 -t 240 --wrap='spack env activate 'locally'; time spack -C ${HOME}/.spack/.rf install -j8'
  elif [[ ( $@ == *'-rf'* )  && ( "${env}" != *'locally'*  ) ]]; then
    # echo "with rf_cluster and not locally - ok "
    sbatch -c 8 -t 240 --wrap='spack env activate '${1}'; time spack -C ${HOME}/.spack/.rf install -j8'
  elif [[ ( $@ == *'-i locally'* )  && ( "${env}" == 'locally -rf'  ) ]]; then
    # echo "rf_cluster and locally - ok"
    #sbatch -c 8 -t 240 --wrap='spack env activate '${1}'; time spack install -j8
    sbatch -c 8 -t 240 --wrap='spack env activate 'locally'; time spack -C ${HOME}/.spack/.rf install -j8'
  elif [[ ( $@ == *'-i'* )  && ( "${env}" == *'locally'*  ) ]]; then
    # echo "no rf_cluster and locally"
    sbatch -c 8 -t 240 --wrap='spack env activate 'locally'; time spack install -j8'
  fi
    # sbatch -c 8 -t 240 --wrap='spack env activate '${1}'; time spack install -j8'
#    sbatch -c 8 -t 180 --wrap='spack_on -a ; spack env activate '${1}'; time spack -ddd -Lk --stacktrace install -j8'

  exit 1
}

function Install_Spack ()
{
  export SPACK_ROOT=${HOME}/software_spack/

  if [ ! -d "${SPACK_ROOT}" ]
  then
     echo -e "\nInstalling Spack"
     echo -e "\nFor more details, see: https://spack.readthedocs.io/en/latest/"

     if [ -d "${SPACK_ROOT}" ]; then mkdir -p ${HOME}/modulefiles; fi

# << 'MULTILINE-COMMENT'

#     if [ -f "${HOME}/modulefiles/slurm" ]; then
#       ln -s /data/apps/lmod/linux-centos8-x86_64/Core/slurm/ ${HOME}/modulefiles/slurm
#     fi

#     if [ -f "${HOME}/modulefiles/helpers" ]; then
#       ln -s /data/apps/lmod/linux-centos8-x86_64/Core/helpers/ ${HOME}/modulefiles/helpers
#     fi

# MULTILINE-COMMENT

     mkdir -p ${SPACK_ROOT}
     cd ${SPACK_ROOT}
     git clone -c feature.manyFiles=true https://github.com/spack/spack.git
     sleep 3

     source /data/apps/go.sh
     ml restore

     #export LMOD_PACKAGE_PATH=/data/apps/v2/a/lmod/.lmodsite;
     #export LMOD_AVAIL_STYLE=en_grouped;
     #export MODULEPATH=$MODULEPATH:/data/apps/v2/a/lmod/Core:${HOME}/modulefiles/linux-centos8-x86_64/Core:;
     export MODULEPATH=$MODULEPATH:${HOME}/modulefiles/lmod;
     export LMOD_IGNORE_CACHE=1;

     source ${SPACK_ROOT}/spack/share/spack/setup-env.sh

     spack mirror add rockfish file:///data/spack/v2/mirror-spack/build_cache
     spack mirror add rfcache file:////data/spack/rockfishmarianatrenchremotebuildsite/share/mirror-rfcache/build_cache

     Spack_setup

     #spack gpg init
     #spack gpg create ${USER}
     spack env create locally
     spack env activate locally
     spack concretize -f
     spack install

     spack env deactivate

     Activate_Spack

  else
     echo -e "\nSpack is installed for this user: \n\nUse: spack_on --activate to activate, or --r to remove it ${SPACK_ROOT}. "
  fi
}
function yaml-merge ()
{
    # https://github.com/ricardojacomini/yaml-merge
    # Usage:
    #
    #   yaml-merge.sh file1.yaml [file2.yaml] [file3.yaml] ...
    #
    # Merge multiple YAML files into a single YAML file.
    # Files are merged in order, such that files listed later will override files listed earlier.
    #

    prefix='-m'
    YAML=${@#"$prefix"}

    #JAR=$(ls -1 $(dirname "$0")/.yaml-merge.jar | head -1 )
    JAR=$(dirname "$0")/.yaml-merge.jar

    if [ -z "${YAML}" ] ; then
      echo -e "\nNo files to merge"
    fi

    if [ -z "${JAR}" ] ; then
      echo -e "\nNo jar matching yaml-merge.jar found."
    fi

    $(java -jar "${JAR}" ${YAML} > merged.yaml)

    echo -e "\nThe new merged.yaml file was created!\n"

}

function remove_spack ()
{
   cd
   echo -e "\nRemoving ${SPACK_ROOT} folder...\n"
   rm -rfR ${SPACK_ROOT}; rm -rfR ${HOME}/.spack

   # This subshell will not cause the parent process to exit
   if [[ ! $(( $BASH_SUBSHELL )) -eq $(( ${SS} )) ]]; then Close_Subshell; fi
}


function Remove_Spack ()
{
  export SPACK_ROOT=${HOME}/software_spack

  if [ -d "${SPACK_ROOT}" ]
  then
     echo -e "\nUninstalling Spack\n"
     echo -e "\nAre you sure you want to remove Spack?\n"

     set -- $(locale LC_MESSAGES)
     yesexpr="$1"; noexpr="$2"; yesword="$3"; noword="$4"

     while true; do
       read -p "Remove (${yesword} / ${noword})? " yn
       if [[ "$yn" =~ $yesexpr ]]; then remove_spack; exit; fi
       if [[ "$yn" =~ $noexpr ]]; then exit; fi
       echo "Answer ${yesword} / ${noword}."
     done
  else
    echo -e "\nSpack is not installed!\n"
  fi
}

while [ $# -gt 0 ]; do
  case $1 in
    -h|--help)
      usage
      exit
      ;;
    -all|--help-all)
      usage_rfadmin
      exit
      ;;
    -a|--activate)
      Activate_Spack
      exit
      ;;
    -f|--find)
      Spack_Add_Packages "${@}"
      exit
      ;;
    -c|--create)
      Install_Spack
      exit
      ;;
    -r|--remove)
      Remove_Spack
      exit
      ;;
    -u)
      Spack_Up
      exit
      ;;
    -i|--install)
      Spack_Up
      Install_Packages "${@}"
      exit
      ;;
    -m|--merge)
      yaml-merge "${@}"
      exit
      ;;
    *)
      echo "Error!! Unrecognized option: $1"
      usage
      exit
      ;;
  esac
  shift
done

Activate_Spack
